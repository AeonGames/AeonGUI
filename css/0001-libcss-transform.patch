diff --git a/docs/Bytecode b/docs/Bytecode
index 7d19573..9768432 100644
--- a/docs/Bytecode
+++ b/docs/Bytecode
@@ -1432,4 +1432,14 @@ Opcodes
 			bit 7 clear => Reserved for future expansion
 				bits 0-6: MBZ
 
-81-3ff - Reserved for future expansion.
+81 - transform
+	<value> (14bits) :
+		bits 8-13: MBZ
+		bits 0-7 :
+			bit 7 set => transform matrix follows
+				bits 0-6: MBZ
+			bit 7 clear => keyword value
+			bits 0-6: 0000000 => none,
+				  other   => rffe.
+
+82-3ff - Reserved for future expansion.
diff --git a/include/libcss/computed.h b/include/libcss/computed.h
index 271a8a1..b5e62d0 100644
--- a/include/libcss/computed.h
+++ b/include/libcss/computed.h
@@ -515,6 +515,10 @@ uint8_t css_computed_order(
 		const css_computed_style *style,
 		int32_t *order);
 
+uint8_t css_computed_transform(
+		const css_computed_style *style,
+		css_matrix *matrix);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/include/libcss/hint.h b/include/libcss/hint.h
index 629d2f6..bc9a74d 100644
--- a/include/libcss/hint.h
+++ b/include/libcss/hint.h
@@ -38,6 +38,7 @@ typedef struct css_hint {
 		css_color color;
 		css_computed_content_item *content;
 		css_computed_counter *counter;
+		css_matrix *transform;
 		css_fixed fixed;
 		int32_t integer;
 		css_hint_length length;
diff --git a/include/libcss/properties.h b/include/libcss/properties.h
index 0581709..4f33cc8 100644
--- a/include/libcss/properties.h
+++ b/include/libcss/properties.h
@@ -143,6 +143,7 @@ enum css_properties_e {
 	CSS_PROP_FILL	        		= 0x07e,
 	CSS_PROP_STROKE			        = 0x07f,
 	CSS_PROP_STROKE_WIDTH	        = 0x080,
+	CSS_PROP_TRANSFORM	            = 0x081,
 
 	CSS_N_PROPERTIES
 };
@@ -752,6 +753,12 @@ enum css_stroke_width_e {
 	CSS_STROKE_WIDTH_SET		= 0x1
 };
 
+enum css_transform_e {
+	CSS_TRANSFORM_INHERIT		= 0x0,
+	CSS_TRANSFORM_NONE			= 0x1,
+	CSS_TRANSFORM_SET			= 0x2
+};
+
 enum css_padding_e {
 	CSS_PADDING_INHERIT			= 0x0,
 	CSS_PADDING_SET				= 0x1
diff --git a/include/libcss/types.h b/include/libcss/types.h
index 3fb28d3..bf5f210 100644
--- a/include/libcss/types.h
+++ b/include/libcss/types.h
@@ -196,6 +196,13 @@ typedef struct css_media_resolution {
 	css_unit unit;
 } css_media_resolution;
 
+/**
+ * Transform Matrix
+ */
+typedef struct css_matrix {
+	css_fixed m[6];
+} css_matrix;
+
 /**
  * Media specification
  */
diff --git a/src/bytecode/opcodes.h b/src/bytecode/opcodes.h
index 09c9610..d07eabb 100644
--- a/src/bytecode/opcodes.h
+++ b/src/bytecode/opcodes.h
@@ -780,6 +780,11 @@ enum op_top {
 	TOP_AUTO			= BOTTOM_AUTO
 };
 
+enum op_transform {
+	TRANSFORM_SET				= 0x0080,
+	TRANSFORM_NONE			    = 0x0000
+};
+
 enum op_unicode_bidi {
 	UNICODE_BIDI_NORMAL		= 0x0000,
 	UNICODE_BIDI_EMBED		= 0x0001,
diff --git a/src/parse/important.c b/src/parse/important.c
index eac6fb9..6c050ec 100644
--- a/src/parse/important.c
+++ b/src/parse/important.c
@@ -441,6 +441,14 @@ void css__make_style_important(css_style *style)
 				}
 				break;
 
+			case CSS_PROP_TRANSFORM:
+				switch (value) {
+				case TRANSFORM_SET:
+					offset += 6; /* 2x3 matrix */
+					break;
+				}
+				break;
+
 			case CSS_PROP_Z_INDEX:
 				if (value == Z_INDEX_SET)
 					offset++; /* z index */
diff --git a/src/parse/properties/css_property_parser_gen.c b/src/parse/properties/css_property_parser_gen.c
index 3e1d997..52818a0 100644
--- a/src/parse/properties/css_property_parser_gen.c
+++ b/src/parse/properties/css_property_parser_gen.c
@@ -311,6 +311,33 @@ void output_color(FILE *outputf, struct keyval *parseid, struct keyval_list *kvl
 		parseid->val);
 }
 
+void output_transform(FILE *outputf, struct keyval *parseid, struct keyval_list *kvlist)
+{
+	fprintf(outputf,
+		"{\n"
+		"\t\tuint16_t value = 0;\n"
+		"\t\tcss_matrix matrix = { .m = { 1024, 0, 0, 1024, 0, 0} };\n"
+		"\t\t*ctx = orig_ctx;\n\n"
+		"\t\terror = css__parse_transform_specifier(c, vector, ctx, &value, &matrix);\n"
+		"\t\tif (error != CSS_OK) {\n"
+		"\t\t\t*ctx = orig_ctx;\n"
+		"\t\t\treturn error;\n"
+		"\t\t}\n\n"
+		"\t\terror = css__stylesheet_style_appendOPV(result, %s, 0, value);\n"
+		"\t\tif (error != CSS_OK) {\n"
+		"\t\t\t*ctx = orig_ctx;\n"
+		"\t\t\treturn error;\n"
+		"\t\t}\n"
+		"\n"
+		"\t\tif (value == TRANSFORM_SET)\n"
+		"\t\t\terror = css__stylesheet_style_vappend(result, 6,\n"
+		"\t\t\t\t\tmatrix.m[0], matrix.m[1],\n"
+		"\t\t\t\t\tmatrix.m[2], matrix.m[3],\n"
+		"\t\t\t\t\tmatrix.m[4], matrix.m[5]);\n"
+		"\t}\n\n",
+		parseid->val);
+}
+
 void output_length_unit(FILE *outputf, struct keyval *parseid, struct keyval_list *kvlist)
 {
 	struct keyval *ckv = kvlist->item[0];
@@ -523,6 +550,7 @@ int main(int argc, char **argv)
 	struct keyval_list WRAP;
 	struct keyval_list NUMBER;
 	struct keyval_list COLOR;
+	struct keyval_list TRANSFORM;
 
 
 	if (argc < 2) {
@@ -555,6 +583,7 @@ int main(int argc, char **argv)
 	COLOR.count = 0;
 	LENGTH_UNIT.count = 0;
 	IDENT_LIST.count = 0;
+	TRANSFORM.count = 0;
 
 	curlist = &base;
 
@@ -611,6 +640,10 @@ int main(int argc, char **argv)
 			COLOR.item[COLOR.count++] = rkv;
 			do_token_check = false;
 			only_ident = false;
+		} else if (strcmp(rkv->key, "TRANSFORM") == 0) {
+			TRANSFORM.item[TRANSFORM.count++] = rkv;
+			do_token_check = false;
+			only_ident = false;
 		} else if (strcmp(rkv->key, "URI") == 0) {
 			URI.item[URI.count++] = rkv;
 			only_ident = false;
@@ -654,6 +687,8 @@ output_header(outputf, descriptor, base.item[0], is_generic);
 			output_length_unit(outputf, base.item[0], &LENGTH_UNIT);
 		} else if (IDENT_LIST.count > 0) {
 			output_ident_list(outputf, base.item[0], &IDENT_LIST);
+		} else if (TRANSFORM.count > 0) {
+			output_transform(outputf, base.item[0], &TRANSFORM);
 		} else {
 			output_invalidcss(outputf);
 		}
diff --git a/src/parse/properties/properties.c b/src/parse/properties/properties.c
index 841093d..e4c8796 100644
--- a/src/parse/properties/properties.c
+++ b/src/parse/properties/properties.c
@@ -151,6 +151,7 @@ const css_prop_handler property_handlers[LAST_PROP + 1 - FIRST_PROP] =
 	css__parse_text_indent,
 	css__parse_text_transform,
 	css__parse_top,
+	css__parse_transform,
 	css__parse_unicode_bidi,
 	css__parse_vertical_align,
 	css__parse_visibility,
@@ -255,6 +256,7 @@ const uint32_t property_unit_mask[CSS_N_PROPERTIES] = {
 	[CSS_PROP_TEXT_INDENT]           = UNIT_MASK_TEXT_INDENT,
 	[CSS_PROP_TEXT_TRANSFORM]        = UNIT_MASK_TEXT_TRANSFORM,
 	[CSS_PROP_TOP]                   = UNIT_MASK_TOP,
+	[CSS_PROP_TRANSFORM]             = UNIT_MASK_TRANSFORM,
 	[CSS_PROP_UNICODE_BIDI]          = UNIT_MASK_UNICODE_BIDI,
 	[CSS_PROP_VERTICAL_ALIGN]        = UNIT_MASK_VERTICAL_ALIGN,
 	[CSS_PROP_VISIBILITY]            = UNIT_MASK_VISIBILITY,
diff --git a/src/parse/properties/properties.gen b/src/parse/properties/properties.gen
index 911c1bc..5e6f58a 100644
--- a/src/parse/properties/properties.gen
+++ b/src/parse/properties/properties.gen
@@ -243,3 +243,5 @@ fill:CSS_PROP_FILL IDENT:( CONTEXT_FILL:0,PAINT_CONTEXT_FILL CONTEXT_STROKE:0,PA
 stroke:CSS_PROP_STROKE IDENT:( CONTEXT_FILL:0,PAINT_CONTEXT_FILL CONTEXT_STROKE:0,PAINT_CONTEXT_STROKE INHERIT: INITIAL: NONE:0,PAINT_NONE REVERT: UNSET: IDENT:) COLOR:STROKE_SET
 
 stroke_width:CSS_PROP_STROKE_WIDTH IDENT:( INHERIT: INITIAL: REVERT: UNSET: IDENT:) LENGTH_UNIT:( UNIT_PX:STROKE_WIDTH_SET MASK:UNIT_MASK_STROKE_WIDTH RANGE:<0 LENGTH_UNIT:)
+
+transform:CSS_PROP_TRANSFORM IDENT:( INHERIT: INITIAL: NONE:0,TRANSFORM_NONE REVERT: UNSET: IDENT:) TRANSFORM:TRANSFORM_SET
diff --git a/src/parse/properties/properties.h b/src/parse/properties/properties.h
index f049fb6..1411be5 100644
--- a/src/parse/properties/properties.h
+++ b/src/parse/properties/properties.h
@@ -439,6 +439,9 @@ css_error css__parse_text_transform(css_language *c,
 css_error css__parse_top(css_language *c,
 		const parserutils_vector *vector, int32_t *ctx,
 		css_style *result);
+css_error css__parse_transform(css_language *c,
+		const parserutils_vector *vector, int32_t *ctx,
+		css_style *result);
 css_error css__parse_unicode_bidi(css_language *c,
 		const parserutils_vector *vector, int32_t *ctx,
 		css_style *result);
@@ -550,6 +553,7 @@ extern const uint32_t property_unit_mask[CSS_N_PROPERTIES];
 #define UNIT_MASK_TEXT_INDENT           (UNIT_LENGTH | UNIT_PCT)
 #define UNIT_MASK_TEXT_TRANSFORM        (0)
 #define UNIT_MASK_TOP                   (UNIT_LENGTH | UNIT_PCT)
+#define UNIT_MASK_TRANSFORM             (0)
 #define UNIT_MASK_UNICODE_BIDI          (0)
 #define UNIT_MASK_VERTICAL_ALIGN        (UNIT_LENGTH | UNIT_PCT)
 #define UNIT_MASK_VISIBILITY            (0)
diff --git a/src/parse/properties/utils.c b/src/parse/properties/utils.c
index e6ab872..fca5c66 100644
--- a/src/parse/properties/utils.c
+++ b/src/parse/properties/utils.c
@@ -1333,3 +1333,74 @@ cleanup:
 
 	return error;
 }
+
+/**
+ * Parse a transform specifier
+ *
+ * \param c       Parsing context
+ * \param vector  Vector of tokens to process
+ * \param ctx     Pointer to vector iteration context
+ * \param value   Pointer to location to receive value
+ * \param result  Pointer to location to receive result
+ * \return CSS_OK      on success,
+ *         CSS_INVALID if the input is invalid
+ *
+ * Post condition: \a *ctx is updated with the next token to process
+ *                 If the input is invalid, then \a *ctx remains unchanged.
+ */
+css_error css__parse_transform_specifier(css_language *c,
+		const parserutils_vector *vector, int32_t *ctx,
+		uint16_t *value, css_matrix *result)
+{
+	int32_t orig_ctx = *ctx;
+	const css_token *token;
+	bool match;
+	css_fixed matrix[6];
+	consumeWhitespace(vector, ctx);
+
+	/* FUNCTION(matrix) [ NUMBER ',' ] {6} ')' */
+	token = parserutils_vector_iterate(vector, ctx);
+
+	if (token->type == CSS_TOKEN_FUNCTION)
+	{
+		if ((lwc_string_caseless_isequal(
+				token->idata, c->strings[MATRIX],
+				&match) == lwc_error_ok && match))
+			{
+				for (size_t i = 0; i < 6; ++i)
+				{
+					size_t consumed = 0;
+					consumeWhitespace(vector, ctx);
+					token = parserutils_vector_peek(vector, *ctx);
+					if (token == NULL || token->type !=	CSS_TOKEN_NUMBER)
+						{*ctx = orig_ctx; return CSS_INVALID;}
+					matrix[i] = css__number_from_lwc_string(token->idata,
+							false, &consumed);
+					if (consumed != lwc_string_length(token->idata))
+						{*ctx = orig_ctx; return CSS_INVALID;}
+
+					parserutils_vector_iterate(vector, ctx);
+
+					consumeWhitespace(vector, ctx);
+
+					token = parserutils_vector_peek(vector, *ctx);
+					if (token == NULL)
+						{*ctx = orig_ctx; return CSS_INVALID;}
+
+					if (i != 5 &&
+							tokenIsChar(token, ',')) {
+						parserutils_vector_iterate(vector, ctx);
+					} else if (i == 5 &&
+							tokenIsChar(token, ')')) {
+						parserutils_vector_iterate(vector, ctx);
+					} else {*ctx = orig_ctx; return CSS_INVALID;}
+				}
+			} else {*ctx = orig_ctx; return CSS_INVALID;}
+
+		memcpy(result->m, matrix, sizeof(css_fixed) * 6);
+	}
+
+	*value = TRANSFORM_SET;
+
+	return CSS_OK;
+}
diff --git a/src/parse/properties/utils.h b/src/parse/properties/utils.h
index aab14e8..e4cf98f 100644
--- a/src/parse/properties/utils.h
+++ b/src/parse/properties/utils.h
@@ -228,4 +228,8 @@ css_error css__comma_list_to_style(css_language *c,
 				bool first),
 		css_style *result);
 
+css_error css__parse_transform_specifier(css_language *c,
+		const parserutils_vector *vector, int32_t *ctx,
+		uint16_t *value, css_matrix *result);
+
 #endif
diff --git a/src/parse/propstrings.c b/src/parse/propstrings.c
index 803036e..e1762c3 100644
--- a/src/parse/propstrings.c
+++ b/src/parse/propstrings.c
@@ -225,6 +225,7 @@ const stringmap_entry stringmap[LAST_KNOWN] = {
 	SMAP("text-indent"),
 	SMAP("text-transform"),
 	SMAP("top"),
+	SMAP("transform"),
 	SMAP("unicode-bidi"),
 	SMAP("vertical-align"),
 	SMAP("visibility"),
@@ -496,6 +497,7 @@ const stringmap_entry stringmap[LAST_KNOWN] = {
 	SMAP("sticky"),
 	SMAP("context-fill"),
 	SMAP("context-stroke"),
+	SMAP("matrix"),
 
 	SMAP("aliceblue"),
 	SMAP("antiquewhite"),
diff --git a/src/parse/propstrings.h b/src/parse/propstrings.h
index 458fa85..f0281f2 100644
--- a/src/parse/propstrings.h
+++ b/src/parse/propstrings.h
@@ -66,8 +66,8 @@ enum {
 	QUOTES, RICHNESS, RIGHT, SPEAK_HEADER, SPEAK_NUMERAL, SPEAK_PUNCTUATION,
 	SPEAK, SPEECH_RATE, STRESS, STROKE, STROKE_OPACITY, STROKE_WIDTH,
 	TABLE_LAYOUT, TEXT_ALIGN, TEXT_DECORATION, TEXT_INDENT, TEXT_TRANSFORM,
-	TOP, UNICODE_BIDI, VERTICAL_ALIGN, VISIBILITY, VOICE_FAMILY, VOLUME,
-	WHITE_SPACE, WIDOWS, WIDTH, WORD_SPACING, WRITING_MODE, Z_INDEX,
+	TOP, TRANSFORM, UNICODE_BIDI, VERTICAL_ALIGN, VISIBILITY, VOICE_FAMILY,
+	VOLUME,	WHITE_SPACE, WIDOWS, WIDTH, WORD_SPACING, WRITING_MODE, Z_INDEX,
 
 	LAST_PROP = Z_INDEX,
 
@@ -110,7 +110,7 @@ enum {
 	VERTICAL_LR, CONTENT_BOX, BORDER_BOX, STRETCH, INLINE_FLEX, FLEX_START,
 	FLEX_END, SPACE_BETWEEN, SPACE_AROUND, SPACE_EVENLY, ROW, ROW_REVERSE,
 	COLUMN_REVERSE, WRAP_STRING, WRAP_REVERSE, AND, OR, ONLY, INFINITE,
-	GRID, INLINE_GRID, STICKY, CONTEXT_FILL, CONTEXT_STROKE,
+	GRID, INLINE_GRID, STICKY, CONTEXT_FILL, CONTEXT_STROKE, MATRIX,
 
 	/* Named colours */
 	FIRST_COLOUR,
diff --git a/src/select/autogenerated_computed.h b/src/select/autogenerated_computed.h
index fb94635..8f39448 100644
--- a/src/select/autogenerated_computed.h
+++ b/src/select/autogenerated_computed.h
@@ -106,6 +106,7 @@ struct css_computed_style_i {
  * text_indent                      1 + 5           4
  * text_transform                   3             
  * top                              2 + 5           4
+ * transform                        2              24
  * unicode_bidi                     2             
  * vertical_align                   4 + 5           4
  * visibility                       2             
@@ -145,9 +146,9 @@ struct css_computed_style_i {
  * quotes                           1             sizeof(ptr)
  * 
  * ---                            ---             ---
- *                                476 bits        248 + 8sizeof(ptr) bytes
+ *                                478 bits        272 + 8sizeof(ptr) bytes
  *                                ===================
- *                                308 + 8sizeof(ptr) bytes
+ *                                332 + 8sizeof(ptr) bytes
  * 
  * Bit allocations:
  * 
@@ -187,10 +188,11 @@ struct css_computed_style_i {
  * display; cursor; break_inside; break_before; break_after; border_top_style;
  * border_right_style; writing_mode
  * 
- * 11 ttppoollffnnaaeemmddccuurriiCCss
- * table_layout; page_break_inside; outline_color; list_style_position;
- * font_variant; font_style; float; flex_wrap; empty_cells; direction; content;
- * column_span; column_rule_color; column_fill; column_count; caption_side
+ * 11 ttaappoollffnnFFeemmddccuurriiCC
+ * transform; table_layout; page_break_inside; outline_color;
+ * list_style_position; font_variant; font_style; float; flex_wrap;
+ * empty_cells; direction; content; column_span; column_rule_color;
+ * column_fill; column_count
  * 
  * 12 bbbbbbbbbbbaaaaaaaaaaavvvvvvvvvw
  * border_spacing; background_position; vertical_align; widows
@@ -200,9 +202,9 @@ struct css_computed_style_i {
  * background_repeat; align_self; align_items; align_content; visibility;
  * unicode_bidi; stroke_opacity
  * 
- * 14 bboorrddeettaaccqpOilfxyunCk....
- * box_sizing; border_top_color; border_right_color; border_left_color;
- * border_collapse; border_bottom_color; background_color;
+ * 14 ccbboorrddeettaakkqpOilfxyunCg..
+ * caption_side; box_sizing; border_top_color; border_right_color;
+ * border_left_color; border_collapse; border_bottom_color; background_color;
  * background_attachment; quotes; orphans; order; opacity; list_style_image;
  * flex_shrink; flex_grow; fill_opacity; counter_reset; counter_increment;
  * color; background_image
@@ -268,6 +270,7 @@ struct css_computed_style_i {
 	css_fixed stroke_width;
 	css_fixed text_indent;
 	css_fixed top;
+	css_matrix transform;
 	css_fixed vertical_align;
 	int32_t widows;
 	css_fixed width;
diff --git a/src/select/autogenerated_propget.h b/src/select/autogenerated_propget.h
index 2ea325d..0868cbd 100644
--- a/src/select/autogenerated_propget.h
+++ b/src/select/autogenerated_propget.h
@@ -85,8 +85,8 @@ static inline uint8_t get_align_self(const css_computed_style *style)
 #undef ALIGN_SELF_MASK
 
 #define BACKGROUND_ATTACHMENT_INDEX 14
-#define BACKGROUND_ATTACHMENT_SHIFT 16
-#define BACKGROUND_ATTACHMENT_MASK 0x30000
+#define BACKGROUND_ATTACHMENT_SHIFT 14
+#define BACKGROUND_ATTACHMENT_MASK 0xc000
 static inline uint8_t get_background_attachment_bits(const css_computed_style
 		*style)
 {
@@ -112,8 +112,8 @@ static inline uint8_t get_background_attachment(const css_computed_style *style)
 #undef BACKGROUND_ATTACHMENT_MASK
 
 #define BACKGROUND_COLOR_INDEX 14
-#define BACKGROUND_COLOR_SHIFT 18
-#define BACKGROUND_COLOR_MASK 0xc0000
+#define BACKGROUND_COLOR_SHIFT 16
+#define BACKGROUND_COLOR_MASK 0x30000
 static inline uint8_t get_background_color_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[BACKGROUND_COLOR_INDEX];
@@ -140,8 +140,8 @@ static inline uint8_t get_background_color(const css_computed_style *style,
 #undef BACKGROUND_COLOR_MASK
 
 #define BACKGROUND_IMAGE_INDEX 14
-#define BACKGROUND_IMAGE_SHIFT 4
-#define BACKGROUND_IMAGE_MASK 0x10
+#define BACKGROUND_IMAGE_SHIFT 2
+#define BACKGROUND_IMAGE_MASK 0x4
 static inline uint8_t get_background_image_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[BACKGROUND_IMAGE_INDEX];
@@ -230,8 +230,8 @@ static inline uint8_t get_background_repeat(const css_computed_style *style)
 #undef BACKGROUND_REPEAT_MASK
 
 #define BORDER_BOTTOM_COLOR_INDEX 14
-#define BORDER_BOTTOM_COLOR_SHIFT 20
-#define BORDER_BOTTOM_COLOR_MASK 0x300000
+#define BORDER_BOTTOM_COLOR_SHIFT 18
+#define BORDER_BOTTOM_COLOR_MASK 0xc0000
 static inline uint8_t get_border_bottom_color_bits(const css_computed_style
 		*style)
 {
@@ -318,8 +318,8 @@ static inline uint8_t get_border_bottom_width(const css_computed_style *style,
 #undef BORDER_BOTTOM_WIDTH_MASK
 
 #define BORDER_COLLAPSE_INDEX 14
-#define BORDER_COLLAPSE_SHIFT 22
-#define BORDER_COLLAPSE_MASK 0xc00000
+#define BORDER_COLLAPSE_SHIFT 20
+#define BORDER_COLLAPSE_MASK 0x300000
 static inline uint8_t get_border_collapse_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[BORDER_COLLAPSE_INDEX];
@@ -344,8 +344,8 @@ static inline uint8_t get_border_collapse(const css_computed_style *style)
 #undef BORDER_COLLAPSE_MASK
 
 #define BORDER_LEFT_COLOR_INDEX 14
-#define BORDER_LEFT_COLOR_SHIFT 24
-#define BORDER_LEFT_COLOR_MASK 0x3000000
+#define BORDER_LEFT_COLOR_SHIFT 22
+#define BORDER_LEFT_COLOR_MASK 0xc00000
 static inline uint8_t get_border_left_color_bits(const css_computed_style
 		*style)
 {
@@ -432,8 +432,8 @@ static inline uint8_t get_border_left_width(const css_computed_style *style,
 #undef BORDER_LEFT_WIDTH_MASK
 
 #define BORDER_RIGHT_COLOR_INDEX 14
-#define BORDER_RIGHT_COLOR_SHIFT 26
-#define BORDER_RIGHT_COLOR_MASK 0xc000000
+#define BORDER_RIGHT_COLOR_SHIFT 24
+#define BORDER_RIGHT_COLOR_MASK 0x3000000
 static inline uint8_t get_border_right_color_bits(const css_computed_style
 		*style)
 {
@@ -554,8 +554,8 @@ static inline uint8_t get_border_spacing(const css_computed_style *style,
 #undef BORDER_SPACING_MASK
 
 #define BORDER_TOP_COLOR_INDEX 14
-#define BORDER_TOP_COLOR_SHIFT 28
-#define BORDER_TOP_COLOR_MASK 0x30000000
+#define BORDER_TOP_COLOR_SHIFT 26
+#define BORDER_TOP_COLOR_MASK 0xc000000
 static inline uint8_t get_border_top_color_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[BORDER_TOP_COLOR_INDEX];
@@ -670,8 +670,8 @@ static inline uint8_t get_bottom(const css_computed_style *style, css_fixed
 #undef BOTTOM_MASK
 
 #define BOX_SIZING_INDEX 14
-#define BOX_SIZING_SHIFT 30
-#define BOX_SIZING_MASK 0xc0000000
+#define BOX_SIZING_SHIFT 28
+#define BOX_SIZING_MASK 0x30000000
 static inline uint8_t get_box_sizing_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[BOX_SIZING_INDEX];
@@ -773,9 +773,9 @@ static inline uint8_t get_break_inside(const css_computed_style *style)
 #undef BREAK_INSIDE_SHIFT
 #undef BREAK_INSIDE_MASK
 
-#define CAPTION_SIDE_INDEX 11
-#define CAPTION_SIDE_SHIFT 0
-#define CAPTION_SIDE_MASK 0x3
+#define CAPTION_SIDE_INDEX 14
+#define CAPTION_SIDE_SHIFT 30
+#define CAPTION_SIDE_MASK 0xc0000000
 static inline uint8_t get_caption_side_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[CAPTION_SIDE_INDEX];
@@ -878,8 +878,8 @@ static inline uint8_t get_clip(
 #undef CLIP_MASK
 
 #define COLOR_INDEX 14
-#define COLOR_SHIFT 5
-#define COLOR_MASK 0x20
+#define COLOR_SHIFT 3
+#define COLOR_MASK 0x8
 static inline uint8_t get_color_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[COLOR_INDEX];
@@ -906,8 +906,8 @@ static inline uint8_t get_color(const css_computed_style *style, css_color
 #undef COLOR_MASK
 
 #define COLUMN_COUNT_INDEX 11
-#define COLUMN_COUNT_SHIFT 2
-#define COLUMN_COUNT_MASK 0xc
+#define COLUMN_COUNT_SHIFT 0
+#define COLUMN_COUNT_MASK 0x3
 static inline uint8_t get_column_count_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[COLUMN_COUNT_INDEX];
@@ -934,8 +934,8 @@ static inline uint8_t get_column_count(const css_computed_style *style, int32_t
 #undef COLUMN_COUNT_MASK
 
 #define COLUMN_FILL_INDEX 11
-#define COLUMN_FILL_SHIFT 4
-#define COLUMN_FILL_MASK 0x30
+#define COLUMN_FILL_SHIFT 2
+#define COLUMN_FILL_MASK 0xc
 static inline uint8_t get_column_fill_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[COLUMN_FILL_INDEX];
@@ -991,8 +991,8 @@ static inline uint8_t get_column_gap(const css_computed_style *style, css_fixed
 #undef COLUMN_GAP_MASK
 
 #define COLUMN_RULE_COLOR_INDEX 11
-#define COLUMN_RULE_COLOR_SHIFT 6
-#define COLUMN_RULE_COLOR_MASK 0xc0
+#define COLUMN_RULE_COLOR_SHIFT 4
+#define COLUMN_RULE_COLOR_MASK 0x30
 static inline uint8_t get_column_rule_color_bits(const css_computed_style
 		*style)
 {
@@ -1079,8 +1079,8 @@ static inline uint8_t get_column_rule_width(const css_computed_style *style,
 #undef COLUMN_RULE_WIDTH_MASK
 
 #define COLUMN_SPAN_INDEX 11
-#define COLUMN_SPAN_SHIFT 8
-#define COLUMN_SPAN_MASK 0x300
+#define COLUMN_SPAN_SHIFT 6
+#define COLUMN_SPAN_MASK 0xc0
 static inline uint8_t get_column_span_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[COLUMN_SPAN_INDEX];
@@ -1136,8 +1136,8 @@ static inline uint8_t get_column_width(const css_computed_style *style,
 #undef COLUMN_WIDTH_MASK
 
 #define CONTENT_INDEX 11
-#define CONTENT_SHIFT 10
-#define CONTENT_MASK 0xc00
+#define CONTENT_SHIFT 8
+#define CONTENT_MASK 0x300
 static inline uint8_t get_content_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[CONTENT_INDEX];
@@ -1166,8 +1166,8 @@ static inline uint8_t get_content(const css_computed_style *style, const
 #undef CONTENT_MASK
 
 #define COUNTER_INCREMENT_INDEX 14
-#define COUNTER_INCREMENT_SHIFT 6
-#define COUNTER_INCREMENT_MASK 0x40
+#define COUNTER_INCREMENT_SHIFT 4
+#define COUNTER_INCREMENT_MASK 0x10
 static inline uint8_t get_counter_increment_bits(const css_computed_style
 		*style)
 {
@@ -1195,8 +1195,8 @@ static inline uint8_t get_counter_increment(const css_computed_style *style,
 #undef COUNTER_INCREMENT_MASK
 
 #define COUNTER_RESET_INDEX 14
-#define COUNTER_RESET_SHIFT 7
-#define COUNTER_RESET_MASK 0x80
+#define COUNTER_RESET_SHIFT 5
+#define COUNTER_RESET_MASK 0x20
 static inline uint8_t get_counter_reset_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[COUNTER_RESET_INDEX];
@@ -1251,8 +1251,8 @@ static inline uint8_t get_cursor(const css_computed_style *style, lwc_string
 #undef CURSOR_MASK
 
 #define DIRECTION_INDEX 11
-#define DIRECTION_SHIFT 12
-#define DIRECTION_MASK 0x3000
+#define DIRECTION_SHIFT 10
+#define DIRECTION_MASK 0xc00
 static inline uint8_t get_direction_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[DIRECTION_INDEX];
@@ -1303,8 +1303,8 @@ static inline uint8_t get_display(const css_computed_style *style)
 #undef DISPLAY_MASK
 
 #define EMPTY_CELLS_INDEX 11
-#define EMPTY_CELLS_SHIFT 14
-#define EMPTY_CELLS_MASK 0xc000
+#define EMPTY_CELLS_SHIFT 12
+#define EMPTY_CELLS_MASK 0x3000
 static inline uint8_t get_empty_cells_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[EMPTY_CELLS_INDEX];
@@ -1357,8 +1357,8 @@ static inline uint8_t get_fill(const css_computed_style *style, css_color
 #undef FILL_MASK
 
 #define FILL_OPACITY_INDEX 14
-#define FILL_OPACITY_SHIFT 8
-#define FILL_OPACITY_MASK 0x100
+#define FILL_OPACITY_SHIFT 6
+#define FILL_OPACITY_MASK 0x40
 static inline uint8_t get_fill_opacity_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[FILL_OPACITY_INDEX];
@@ -1444,8 +1444,8 @@ static inline uint8_t get_flex_direction(const css_computed_style *style)
 #undef FLEX_DIRECTION_MASK
 
 #define FLEX_GROW_INDEX 14
-#define FLEX_GROW_SHIFT 9
-#define FLEX_GROW_MASK 0x200
+#define FLEX_GROW_SHIFT 7
+#define FLEX_GROW_MASK 0x80
 static inline uint8_t get_flex_grow_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[FLEX_GROW_INDEX];
@@ -1474,8 +1474,8 @@ static inline uint8_t get_flex_grow(const css_computed_style *style, css_fixed
 #undef FLEX_GROW_MASK
 
 #define FLEX_SHRINK_INDEX 14
-#define FLEX_SHRINK_SHIFT 10
-#define FLEX_SHRINK_MASK 0x400
+#define FLEX_SHRINK_SHIFT 8
+#define FLEX_SHRINK_MASK 0x100
 static inline uint8_t get_flex_shrink_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[FLEX_SHRINK_INDEX];
@@ -1504,8 +1504,8 @@ static inline uint8_t get_flex_shrink(const css_computed_style *style,
 #undef FLEX_SHRINK_MASK
 
 #define FLEX_WRAP_INDEX 11
-#define FLEX_WRAP_SHIFT 16
-#define FLEX_WRAP_MASK 0x30000
+#define FLEX_WRAP_SHIFT 14
+#define FLEX_WRAP_MASK 0xc000
 static inline uint8_t get_flex_wrap_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[FLEX_WRAP_INDEX];
@@ -1530,8 +1530,8 @@ static inline uint8_t get_flex_wrap(const css_computed_style *style)
 #undef FLEX_WRAP_MASK
 
 #define FLOAT_INDEX 11
-#define FLOAT_SHIFT 18
-#define FLOAT_MASK 0xc0000
+#define FLOAT_SHIFT 16
+#define FLOAT_MASK 0x30000
 static inline uint8_t get_float_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[FLOAT_INDEX];
@@ -1615,8 +1615,8 @@ static inline uint8_t get_font_size(const css_computed_style *style, css_fixed
 #undef FONT_SIZE_MASK
 
 #define FONT_STYLE_INDEX 11
-#define FONT_STYLE_SHIFT 20
-#define FONT_STYLE_MASK 0x300000
+#define FONT_STYLE_SHIFT 18
+#define FONT_STYLE_MASK 0xc0000
 static inline uint8_t get_font_style_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[FONT_STYLE_INDEX];
@@ -1641,8 +1641,8 @@ static inline uint8_t get_font_style(const css_computed_style *style)
 #undef FONT_STYLE_MASK
 
 #define FONT_VARIANT_INDEX 11
-#define FONT_VARIANT_SHIFT 22
-#define FONT_VARIANT_MASK 0xc00000
+#define FONT_VARIANT_SHIFT 20
+#define FONT_VARIANT_MASK 0x300000
 static inline uint8_t get_font_variant_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[FONT_VARIANT_INDEX];
@@ -1848,8 +1848,8 @@ static inline uint8_t get_line_height(
 #undef LINE_HEIGHT_MASK
 
 #define LIST_STYLE_IMAGE_INDEX 14
-#define LIST_STYLE_IMAGE_SHIFT 11
-#define LIST_STYLE_IMAGE_MASK 0x800
+#define LIST_STYLE_IMAGE_SHIFT 9
+#define LIST_STYLE_IMAGE_MASK 0x200
 static inline uint8_t get_list_style_image_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[LIST_STYLE_IMAGE_INDEX];
@@ -1876,8 +1876,8 @@ static inline uint8_t get_list_style_image(const css_computed_style *style,
 #undef LIST_STYLE_IMAGE_MASK
 
 #define LIST_STYLE_POSITION_INDEX 11
-#define LIST_STYLE_POSITION_SHIFT 24
-#define LIST_STYLE_POSITION_MASK 0x3000000
+#define LIST_STYLE_POSITION_SHIFT 22
+#define LIST_STYLE_POSITION_MASK 0xc00000
 static inline uint8_t get_list_style_position_bits(const css_computed_style
 		*style)
 {
@@ -2177,8 +2177,8 @@ static inline uint8_t get_min_width(const css_computed_style *style, css_fixed
 #undef MIN_WIDTH_MASK
 
 #define OPACITY_INDEX 14
-#define OPACITY_SHIFT 12
-#define OPACITY_MASK 0x1000
+#define OPACITY_SHIFT 10
+#define OPACITY_MASK 0x400
 static inline uint8_t get_opacity_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[OPACITY_INDEX];
@@ -2207,8 +2207,8 @@ static inline uint8_t get_opacity(const css_computed_style *style, css_fixed
 #undef OPACITY_MASK
 
 #define ORDER_INDEX 14
-#define ORDER_SHIFT 13
-#define ORDER_MASK 0x2000
+#define ORDER_SHIFT 11
+#define ORDER_MASK 0x800
 static inline uint8_t get_order_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[ORDER_INDEX];
@@ -2237,8 +2237,8 @@ static inline uint8_t get_order(const css_computed_style *style, int32_t
 #undef ORDER_MASK
 
 #define ORPHANS_INDEX 14
-#define ORPHANS_SHIFT 14
-#define ORPHANS_MASK 0x4000
+#define ORPHANS_SHIFT 12
+#define ORPHANS_MASK 0x1000
 static inline uint8_t get_orphans_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[ORPHANS_INDEX];
@@ -2265,8 +2265,8 @@ static inline uint8_t get_orphans(const css_computed_style *style, int32_t
 #undef ORPHANS_MASK
 
 #define OUTLINE_COLOR_INDEX 11
-#define OUTLINE_COLOR_SHIFT 26
-#define OUTLINE_COLOR_MASK 0xc000000
+#define OUTLINE_COLOR_SHIFT 24
+#define OUTLINE_COLOR_MASK 0x3000000
 static inline uint8_t get_outline_color_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[OUTLINE_COLOR_INDEX];
@@ -2581,8 +2581,8 @@ static inline uint8_t get_page_break_before(const css_computed_style *style)
 #undef PAGE_BREAK_BEFORE_MASK
 
 #define PAGE_BREAK_INSIDE_INDEX 11
-#define PAGE_BREAK_INSIDE_SHIFT 28
-#define PAGE_BREAK_INSIDE_MASK 0x30000000
+#define PAGE_BREAK_INSIDE_SHIFT 26
+#define PAGE_BREAK_INSIDE_MASK 0xc000000
 static inline uint8_t get_page_break_inside_bits(const css_computed_style
 		*style)
 {
@@ -2634,8 +2634,8 @@ static inline uint8_t get_position(const css_computed_style *style)
 #undef POSITION_MASK
 
 #define QUOTES_INDEX 14
-#define QUOTES_SHIFT 15
-#define QUOTES_MASK 0x8000
+#define QUOTES_SHIFT 13
+#define QUOTES_MASK 0x2000
 static inline uint8_t get_quotes_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[QUOTES_INDEX];
@@ -2782,8 +2782,8 @@ static inline uint8_t get_stroke_width(const css_computed_style *style,
 #undef STROKE_WIDTH_MASK
 
 #define TABLE_LAYOUT_INDEX 11
-#define TABLE_LAYOUT_SHIFT 30
-#define TABLE_LAYOUT_MASK 0xc0000000
+#define TABLE_LAYOUT_SHIFT 28
+#define TABLE_LAYOUT_MASK 0x30000000
 static inline uint8_t get_table_layout_bits(const css_computed_style *style)
 {
 	uint32_t bits = style->i.bits[TABLE_LAYOUT_INDEX];
@@ -2947,6 +2947,34 @@ static inline uint8_t get_top(const css_computed_style *style, css_fixed
 #undef TOP_SHIFT
 #undef TOP_MASK
 
+#define TRANSFORM_INDEX 11
+#define TRANSFORM_SHIFT 30
+#define TRANSFORM_MASK 0xc0000000
+static inline uint8_t get_transform_bits(const css_computed_style *style)
+{
+	uint32_t bits = style->i.bits[TRANSFORM_INDEX];
+	bits &= TRANSFORM_MASK;
+	bits >>= TRANSFORM_SHIFT;
+
+	/* 2bits: tt : type */
+	return (bits & 0x3);
+}
+static inline uint8_t get_transform(const css_computed_style *style, css_matrix
+		*matrix)
+{
+	uint32_t bits = style->i.bits[TRANSFORM_INDEX];
+	bits &= TRANSFORM_MASK;
+	bits >>= TRANSFORM_SHIFT;
+
+	/* 2bits: tt : type */
+	*matrix = style->i.transform;
+
+	return (bits & 0x3);
+}
+#undef TRANSFORM_INDEX
+#undef TRANSFORM_SHIFT
+#undef TRANSFORM_MASK
+
 #define UNICODE_BIDI_INDEX 13
 #define UNICODE_BIDI_SHIFT 1
 #define UNICODE_BIDI_MASK 0x6
diff --git a/src/select/autogenerated_propset.h b/src/select/autogenerated_propset.h
index 345292d..3531960 100644
--- a/src/select/autogenerated_propset.h
+++ b/src/select/autogenerated_propset.h
@@ -64,8 +64,8 @@ static inline css_error set_align_self(css_computed_style *style, uint8_t type)
 #undef ALIGN_SELF_MASK
 
 #define BACKGROUND_ATTACHMENT_INDEX 14
-#define BACKGROUND_ATTACHMENT_SHIFT 16
-#define BACKGROUND_ATTACHMENT_MASK 0x30000
+#define BACKGROUND_ATTACHMENT_SHIFT 14
+#define BACKGROUND_ATTACHMENT_MASK 0xc000
 
 static inline css_error set_background_attachment(css_computed_style *style,
 		uint8_t type)
@@ -83,8 +83,8 @@ static inline css_error set_background_attachment(css_computed_style *style,
 #undef BACKGROUND_ATTACHMENT_MASK
 
 #define BACKGROUND_COLOR_INDEX 14
-#define BACKGROUND_COLOR_SHIFT 18
-#define BACKGROUND_COLOR_MASK 0xc0000
+#define BACKGROUND_COLOR_SHIFT 16
+#define BACKGROUND_COLOR_MASK 0x30000
 
 static inline css_error set_background_color(css_computed_style *style, uint8_t
 		type, css_color color)
@@ -104,8 +104,8 @@ static inline css_error set_background_color(css_computed_style *style, uint8_t
 #undef BACKGROUND_COLOR_MASK
 
 #define BACKGROUND_IMAGE_INDEX 14
-#define BACKGROUND_IMAGE_SHIFT 4
-#define BACKGROUND_IMAGE_MASK 0x10
+#define BACKGROUND_IMAGE_SHIFT 2
+#define BACKGROUND_IMAGE_MASK 0x4
 
 static inline css_error set_background_image(css_computed_style *style, uint8_t
 		type, lwc_string *string)
@@ -178,8 +178,8 @@ static inline css_error set_background_repeat(css_computed_style *style,
 #undef BACKGROUND_REPEAT_MASK
 
 #define BORDER_BOTTOM_COLOR_INDEX 14
-#define BORDER_BOTTOM_COLOR_SHIFT 20
-#define BORDER_BOTTOM_COLOR_MASK 0x300000
+#define BORDER_BOTTOM_COLOR_SHIFT 18
+#define BORDER_BOTTOM_COLOR_MASK 0xc0000
 
 static inline css_error set_border_bottom_color(css_computed_style *style,
 		uint8_t type, css_color color)
@@ -239,8 +239,8 @@ static inline css_error set_border_bottom_width(css_computed_style *style,
 #undef BORDER_BOTTOM_WIDTH_MASK
 
 #define BORDER_COLLAPSE_INDEX 14
-#define BORDER_COLLAPSE_SHIFT 22
-#define BORDER_COLLAPSE_MASK 0xc00000
+#define BORDER_COLLAPSE_SHIFT 20
+#define BORDER_COLLAPSE_MASK 0x300000
 
 static inline css_error set_border_collapse(css_computed_style *style, uint8_t
 		type)
@@ -258,8 +258,8 @@ static inline css_error set_border_collapse(css_computed_style *style, uint8_t
 #undef BORDER_COLLAPSE_MASK
 
 #define BORDER_LEFT_COLOR_INDEX 14
-#define BORDER_LEFT_COLOR_SHIFT 24
-#define BORDER_LEFT_COLOR_MASK 0x3000000
+#define BORDER_LEFT_COLOR_SHIFT 22
+#define BORDER_LEFT_COLOR_MASK 0xc00000
 
 static inline css_error set_border_left_color(css_computed_style *style,
 		uint8_t type, css_color color)
@@ -319,8 +319,8 @@ static inline css_error set_border_left_width(css_computed_style *style,
 #undef BORDER_LEFT_WIDTH_MASK
 
 #define BORDER_RIGHT_COLOR_INDEX 14
-#define BORDER_RIGHT_COLOR_SHIFT 26
-#define BORDER_RIGHT_COLOR_MASK 0xc000000
+#define BORDER_RIGHT_COLOR_SHIFT 24
+#define BORDER_RIGHT_COLOR_MASK 0x3000000
 
 static inline css_error set_border_right_color(css_computed_style *style,
 		uint8_t type, css_color color)
@@ -404,8 +404,8 @@ static inline css_error set_border_spacing(css_computed_style *style, uint8_t
 #undef BORDER_SPACING_MASK
 
 #define BORDER_TOP_COLOR_INDEX 14
-#define BORDER_TOP_COLOR_SHIFT 28
-#define BORDER_TOP_COLOR_MASK 0x30000000
+#define BORDER_TOP_COLOR_SHIFT 26
+#define BORDER_TOP_COLOR_MASK 0xc000000
 
 static inline css_error set_border_top_color(css_computed_style *style, uint8_t
 		type, css_color color)
@@ -486,8 +486,8 @@ static inline css_error set_bottom(css_computed_style *style, uint8_t type,
 #undef BOTTOM_MASK
 
 #define BOX_SIZING_INDEX 14
-#define BOX_SIZING_SHIFT 30
-#define BOX_SIZING_MASK 0xc0000000
+#define BOX_SIZING_SHIFT 28
+#define BOX_SIZING_MASK 0x30000000
 
 static inline css_error set_box_sizing(css_computed_style *style, uint8_t type)
 {
@@ -559,9 +559,9 @@ static inline css_error set_break_inside(css_computed_style *style, uint8_t
 #undef BREAK_INSIDE_SHIFT
 #undef BREAK_INSIDE_MASK
 
-#define CAPTION_SIDE_INDEX 11
-#define CAPTION_SIDE_SHIFT 0
-#define CAPTION_SIDE_MASK 0x3
+#define CAPTION_SIDE_INDEX 14
+#define CAPTION_SIDE_SHIFT 30
+#define CAPTION_SIDE_MASK 0xc0000000
 
 static inline css_error set_caption_side(css_computed_style *style, uint8_t
 		type)
@@ -639,8 +639,8 @@ static inline css_error set_clip(
 #undef CLIP_MASK
 
 #define COLOR_INDEX 14
-#define COLOR_SHIFT 5
-#define COLOR_MASK 0x20
+#define COLOR_SHIFT 3
+#define COLOR_MASK 0x8
 
 static inline css_error set_color(css_computed_style *style, uint8_t type,
 		css_color color)
@@ -659,8 +659,8 @@ static inline css_error set_color(css_computed_style *style, uint8_t type,
 #undef COLOR_MASK
 
 #define COLUMN_COUNT_INDEX 11
-#define COLUMN_COUNT_SHIFT 2
-#define COLUMN_COUNT_MASK 0xc
+#define COLUMN_COUNT_SHIFT 0
+#define COLUMN_COUNT_MASK 0x3
 
 static inline css_error set_column_count(css_computed_style *style, uint8_t
 		type, int32_t integer)
@@ -680,8 +680,8 @@ static inline css_error set_column_count(css_computed_style *style, uint8_t
 #undef COLUMN_COUNT_MASK
 
 #define COLUMN_FILL_INDEX 11
-#define COLUMN_FILL_SHIFT 4
-#define COLUMN_FILL_MASK 0x30
+#define COLUMN_FILL_SHIFT 2
+#define COLUMN_FILL_MASK 0xc
 
 static inline css_error set_column_fill(css_computed_style *style, uint8_t type)
 {
@@ -719,8 +719,8 @@ static inline css_error set_column_gap(css_computed_style *style, uint8_t type,
 #undef COLUMN_GAP_MASK
 
 #define COLUMN_RULE_COLOR_INDEX 11
-#define COLUMN_RULE_COLOR_SHIFT 6
-#define COLUMN_RULE_COLOR_MASK 0xc0
+#define COLUMN_RULE_COLOR_SHIFT 4
+#define COLUMN_RULE_COLOR_MASK 0x30
 
 static inline css_error set_column_rule_color(css_computed_style *style,
 		uint8_t type, css_color color)
@@ -780,8 +780,8 @@ static inline css_error set_column_rule_width(css_computed_style *style,
 #undef COLUMN_RULE_WIDTH_MASK
 
 #define COLUMN_SPAN_INDEX 11
-#define COLUMN_SPAN_SHIFT 8
-#define COLUMN_SPAN_MASK 0x300
+#define COLUMN_SPAN_SHIFT 6
+#define COLUMN_SPAN_MASK 0xc0
 
 static inline css_error set_column_span(css_computed_style *style, uint8_t type)
 {
@@ -819,8 +819,8 @@ static inline css_error set_column_width(css_computed_style *style, uint8_t
 #undef COLUMN_WIDTH_MASK
 
 #define CONTENT_INDEX 11
-#define CONTENT_SHIFT 10
-#define CONTENT_MASK 0xc00
+#define CONTENT_SHIFT 8
+#define CONTENT_MASK 0x300
 static inline css_error set_content(
 		css_computed_style *style, uint8_t type,
 		css_computed_content_item *content)
@@ -902,8 +902,8 @@ static inline css_error set_content(
 #undef CONTENT_MASK
 
 #define COUNTER_INCREMENT_INDEX 14
-#define COUNTER_INCREMENT_SHIFT 6
-#define COUNTER_INCREMENT_MASK 0x40
+#define COUNTER_INCREMENT_SHIFT 4
+#define COUNTER_INCREMENT_MASK 0x10
 
 static inline css_error set_counter_increment(css_computed_style *style,
 		uint8_t type, css_computed_counter *counter_arr)
@@ -938,8 +938,8 @@ static inline css_error set_counter_increment(css_computed_style *style,
 #undef COUNTER_INCREMENT_MASK
 
 #define COUNTER_RESET_INDEX 14
-#define COUNTER_RESET_SHIFT 7
-#define COUNTER_RESET_MASK 0x80
+#define COUNTER_RESET_SHIFT 5
+#define COUNTER_RESET_MASK 0x20
 
 static inline css_error set_counter_reset(css_computed_style *style, uint8_t
 		type, css_computed_counter *counter_arr)
@@ -1010,8 +1010,8 @@ static inline css_error set_cursor(css_computed_style *style, uint8_t type,
 #undef CURSOR_MASK
 
 #define DIRECTION_INDEX 11
-#define DIRECTION_SHIFT 12
-#define DIRECTION_MASK 0x3000
+#define DIRECTION_SHIFT 10
+#define DIRECTION_MASK 0xc00
 
 static inline css_error set_direction(css_computed_style *style, uint8_t type)
 {
@@ -1046,8 +1046,8 @@ static inline css_error set_display(css_computed_style *style, uint8_t type)
 #undef DISPLAY_MASK
 
 #define EMPTY_CELLS_INDEX 11
-#define EMPTY_CELLS_SHIFT 14
-#define EMPTY_CELLS_MASK 0xc000
+#define EMPTY_CELLS_SHIFT 12
+#define EMPTY_CELLS_MASK 0x3000
 
 static inline css_error set_empty_cells(css_computed_style *style, uint8_t type)
 {
@@ -1084,8 +1084,8 @@ static inline css_error set_fill(css_computed_style *style, uint8_t type,
 #undef FILL_MASK
 
 #define FILL_OPACITY_INDEX 14
-#define FILL_OPACITY_SHIFT 8
-#define FILL_OPACITY_MASK 0x100
+#define FILL_OPACITY_SHIFT 6
+#define FILL_OPACITY_MASK 0x40
 
 static inline css_error set_fill_opacity(css_computed_style *style, uint8_t
 		type, css_fixed fixed)
@@ -1145,8 +1145,8 @@ static inline css_error set_flex_direction(css_computed_style *style, uint8_t
 #undef FLEX_DIRECTION_MASK
 
 #define FLEX_GROW_INDEX 14
-#define FLEX_GROW_SHIFT 9
-#define FLEX_GROW_MASK 0x200
+#define FLEX_GROW_SHIFT 7
+#define FLEX_GROW_MASK 0x80
 
 static inline css_error set_flex_grow(css_computed_style *style, uint8_t type,
 		css_fixed fixed)
@@ -1166,8 +1166,8 @@ static inline css_error set_flex_grow(css_computed_style *style, uint8_t type,
 #undef FLEX_GROW_MASK
 
 #define FLEX_SHRINK_INDEX 14
-#define FLEX_SHRINK_SHIFT 10
-#define FLEX_SHRINK_MASK 0x400
+#define FLEX_SHRINK_SHIFT 8
+#define FLEX_SHRINK_MASK 0x100
 
 static inline css_error set_flex_shrink(css_computed_style *style, uint8_t
 		type, css_fixed fixed)
@@ -1187,8 +1187,8 @@ static inline css_error set_flex_shrink(css_computed_style *style, uint8_t
 #undef FLEX_SHRINK_MASK
 
 #define FLEX_WRAP_INDEX 11
-#define FLEX_WRAP_SHIFT 16
-#define FLEX_WRAP_MASK 0x30000
+#define FLEX_WRAP_SHIFT 14
+#define FLEX_WRAP_MASK 0xc000
 
 static inline css_error set_flex_wrap(css_computed_style *style, uint8_t type)
 {
@@ -1205,8 +1205,8 @@ static inline css_error set_flex_wrap(css_computed_style *style, uint8_t type)
 #undef FLEX_WRAP_MASK
 
 #define FLOAT_INDEX 11
-#define FLOAT_SHIFT 18
-#define FLOAT_MASK 0xc0000
+#define FLOAT_SHIFT 16
+#define FLOAT_MASK 0x30000
 
 static inline css_error set_float(css_computed_style *style, uint8_t type)
 {
@@ -1279,8 +1279,8 @@ static inline css_error set_font_size(css_computed_style *style, uint8_t type,
 #undef FONT_SIZE_MASK
 
 #define FONT_STYLE_INDEX 11
-#define FONT_STYLE_SHIFT 20
-#define FONT_STYLE_MASK 0x300000
+#define FONT_STYLE_SHIFT 18
+#define FONT_STYLE_MASK 0xc0000
 
 static inline css_error set_font_style(css_computed_style *style, uint8_t type)
 {
@@ -1297,8 +1297,8 @@ static inline css_error set_font_style(css_computed_style *style, uint8_t type)
 #undef FONT_STYLE_MASK
 
 #define FONT_VARIANT_INDEX 11
-#define FONT_VARIANT_SHIFT 22
-#define FONT_VARIANT_MASK 0xc00000
+#define FONT_VARIANT_SHIFT 20
+#define FONT_VARIANT_MASK 0x300000
 
 static inline css_error set_font_variant(css_computed_style *style, uint8_t
 		type)
@@ -1437,8 +1437,8 @@ static inline css_error set_line_height(css_computed_style *style, uint8_t
 #undef LINE_HEIGHT_MASK
 
 #define LIST_STYLE_IMAGE_INDEX 14
-#define LIST_STYLE_IMAGE_SHIFT 11
-#define LIST_STYLE_IMAGE_MASK 0x800
+#define LIST_STYLE_IMAGE_SHIFT 9
+#define LIST_STYLE_IMAGE_MASK 0x200
 
 static inline css_error set_list_style_image(css_computed_style *style, uint8_t
 		type, lwc_string *string)
@@ -1467,8 +1467,8 @@ static inline css_error set_list_style_image(css_computed_style *style, uint8_t
 #undef LIST_STYLE_IMAGE_MASK
 
 #define LIST_STYLE_POSITION_INDEX 11
-#define LIST_STYLE_POSITION_SHIFT 24
-#define LIST_STYLE_POSITION_MASK 0x3000000
+#define LIST_STYLE_POSITION_SHIFT 22
+#define LIST_STYLE_POSITION_MASK 0xc00000
 
 static inline css_error set_list_style_position(css_computed_style *style,
 		uint8_t type)
@@ -1673,8 +1673,8 @@ static inline css_error set_min_width(css_computed_style *style, uint8_t type,
 #undef MIN_WIDTH_MASK
 
 #define OPACITY_INDEX 14
-#define OPACITY_SHIFT 12
-#define OPACITY_MASK 0x1000
+#define OPACITY_SHIFT 10
+#define OPACITY_MASK 0x400
 
 static inline css_error set_opacity(css_computed_style *style, uint8_t type,
 		css_fixed fixed)
@@ -1694,8 +1694,8 @@ static inline css_error set_opacity(css_computed_style *style, uint8_t type,
 #undef OPACITY_MASK
 
 #define ORDER_INDEX 14
-#define ORDER_SHIFT 13
-#define ORDER_MASK 0x2000
+#define ORDER_SHIFT 11
+#define ORDER_MASK 0x800
 
 static inline css_error set_order(css_computed_style *style, uint8_t type,
 		int32_t integer)
@@ -1714,8 +1714,8 @@ static inline css_error set_order(css_computed_style *style, uint8_t type,
 #undef ORDER_MASK
 
 #define ORPHANS_INDEX 14
-#define ORPHANS_SHIFT 14
-#define ORPHANS_MASK 0x4000
+#define ORPHANS_SHIFT 12
+#define ORPHANS_MASK 0x1000
 
 static inline css_error set_orphans(css_computed_style *style, uint8_t type,
 		int32_t integer)
@@ -1735,8 +1735,8 @@ static inline css_error set_orphans(css_computed_style *style, uint8_t type,
 #undef ORPHANS_MASK
 
 #define OUTLINE_COLOR_INDEX 11
-#define OUTLINE_COLOR_SHIFT 26
-#define OUTLINE_COLOR_MASK 0xc000000
+#define OUTLINE_COLOR_SHIFT 24
+#define OUTLINE_COLOR_MASK 0x3000000
 
 static inline css_error set_outline_color(css_computed_style *style, uint8_t
 		type, css_color color)
@@ -1954,8 +1954,8 @@ static inline css_error set_page_break_before(css_computed_style *style,
 #undef PAGE_BREAK_BEFORE_MASK
 
 #define PAGE_BREAK_INSIDE_INDEX 11
-#define PAGE_BREAK_INSIDE_SHIFT 28
-#define PAGE_BREAK_INSIDE_MASK 0x30000000
+#define PAGE_BREAK_INSIDE_SHIFT 26
+#define PAGE_BREAK_INSIDE_MASK 0xc000000
 
 static inline css_error set_page_break_inside(css_computed_style *style,
 		uint8_t type)
@@ -1991,8 +1991,8 @@ static inline css_error set_position(css_computed_style *style, uint8_t type)
 #undef POSITION_MASK
 
 #define QUOTES_INDEX 14
-#define QUOTES_SHIFT 15
-#define QUOTES_MASK 0x8000
+#define QUOTES_SHIFT 13
+#define QUOTES_MASK 0x2000
 
 static inline css_error set_quotes(css_computed_style *style, uint8_t type,
 		lwc_string **string_arr)
@@ -2111,8 +2111,8 @@ static inline css_error set_stroke_width(css_computed_style *style, uint8_t
 #undef STROKE_WIDTH_MASK
 
 #define TABLE_LAYOUT_INDEX 11
-#define TABLE_LAYOUT_SHIFT 30
-#define TABLE_LAYOUT_MASK 0xc0000000
+#define TABLE_LAYOUT_SHIFT 28
+#define TABLE_LAYOUT_MASK 0x30000000
 
 static inline css_error set_table_layout(css_computed_style *style, uint8_t
 		type)
@@ -2227,6 +2227,26 @@ static inline css_error set_top(css_computed_style *style, uint8_t type,
 #undef TOP_SHIFT
 #undef TOP_MASK
 
+#define TRANSFORM_INDEX 11
+#define TRANSFORM_SHIFT 30
+#define TRANSFORM_MASK 0xc0000000
+static inline css_error set_transform(css_computed_style *style, uint8_t type,
+		const css_matrix* matrix)
+{
+	uint32_t *bits = &style->i.bits[TRANSFORM_INDEX];
+
+	/* 2bits: tt : type */
+	*bits = (*bits & ~TRANSFORM_MASK) | (((uint32_t)type & 0x3) <<
+			TRANSFORM_SHIFT);
+
+	style->i.transform = *matrix;
+
+	return CSS_OK;
+}
+#undef TRANSFORM_INDEX
+#undef TRANSFORM_SHIFT
+#undef TRANSFORM_MASK
+
 #define UNICODE_BIDI_INDEX 13
 #define UNICODE_BIDI_SHIFT 1
 #define UNICODE_BIDI_MASK 0x6
diff --git a/src/select/computed.c b/src/select/computed.c
index 2de0417..f4e837c 100644
--- a/src/select/computed.c
+++ b/src/select/computed.c
@@ -482,6 +482,12 @@ uint8_t css_computed_top(const css_computed_style *style,
 	return top;
 }
 
+uint8_t css_computed_transform(const css_computed_style *style,
+		css_matrix *matrix)
+{
+	return get_transform(style, matrix);
+}
+
 uint8_t css_computed_right(const css_computed_style *style,
 		css_fixed *length, css_unit *unit)
 {
diff --git a/src/select/dispatch.c b/src/select/dispatch.c
index 4a45d6c..6645fb0 100644
--- a/src/select/dispatch.c
+++ b/src/select/dispatch.c
@@ -535,4 +535,8 @@ struct prop_table prop_dispatch[CSS_N_PROPERTIES] = {
 		PROPERTY_FUNCS(stroke_width),
 		1,
 	},
+	{
+		PROPERTY_FUNCS(transform),
+		0,
+	},
 };
diff --git a/src/select/overrides.py b/src/select/overrides.py
index 869d6ec..ab0f924 100644
--- a/src/select/overrides.py
+++ b/src/select/overrides.py
@@ -183,3 +183,18 @@ static inline css_error set_content(
 
 	return CSS_OK;
 }'''
+
+overrides['set']['transform'] = '''\
+static inline css_error set_transform(css_computed_style *style, uint8_t type,
+		const css_matrix* matrix)
+{
+	uint32_t *bits = &style->i.bits[TRANSFORM_INDEX];
+
+	/* 2bits: tt : type */
+	*bits = (*bits & ~TRANSFORM_MASK) | (((uint32_t)type & 0x3) <<
+			TRANSFORM_SHIFT);
+
+	style->i.transform = *matrix;
+
+	return CSS_OK;
+}'''
diff --git a/src/select/properties/Makefile b/src/select/properties/Makefile
index 7121cce..b39d524 100644
--- a/src/select/properties/Makefile
+++ b/src/select/properties/Makefile
@@ -118,6 +118,7 @@ text_decoration.c \
 text_indent.c \
 text_transform.c \
 top.c \
+transform.c \
 unicode_bidi.c \
 vertical_align.c \
 visibility.c \
diff --git a/src/select/properties/properties.h b/src/select/properties/properties.h
index 4e5ec62..1fcf39a 100644
--- a/src/select/properties/properties.h
+++ b/src/select/properties/properties.h
@@ -140,6 +140,7 @@ PROPERTY_FUNCS(text_decoration);
 PROPERTY_FUNCS(text_indent);
 PROPERTY_FUNCS(text_transform);
 PROPERTY_FUNCS(top);
+PROPERTY_FUNCS(transform);
 PROPERTY_FUNCS(unicode_bidi);
 PROPERTY_FUNCS(vertical_align);
 PROPERTY_FUNCS(visibility);
diff --git a/src/select/properties/transform.c b/src/select/properties/transform.c
new file mode 100644
index 0000000..83c2fa0
--- /dev/null
+++ b/src/select/properties/transform.c
@@ -0,0 +1,81 @@
+/*
+ * This file is part of LibCSS
+ * Licensed under the MIT License,
+ *		  http://www.opensource.org/licenses/mit-license.php
+ * Copyright 2009 John-Mark Bell <jmb@netsurf-browser.org>
+ */
+
+#include "bytecode/bytecode.h"
+#include "bytecode/opcodes.h"
+#include "select/propset.h"
+#include "select/propget.h"
+#include "utils/utils.h"
+
+#include "select/properties/properties.h"
+#include "select/properties/helpers.h"
+
+css_error css__cascade_transform(uint32_t opv, css_style *style,
+		css_select_state *state)
+{
+	uint16_t value = CSS_TRANSFORM_INHERIT;
+	css_matrix matrix = {{1024,0,0,1024,0,0}};
+
+	if (hasFlagValue(opv) == false) {
+		switch (getValue(opv)) {
+		case TRANSFORM_NONE:
+			value = CSS_TRANSFORM_NONE;
+			break;
+		case TRANSFORM_SET:
+			value = CSS_TRANSFORM_SET;
+			matrix = *((css_matrix *) style->bytecode);
+			advance_bytecode(style, sizeof(matrix));
+			break;
+		}
+	}
+
+	if (css__outranks_existing(getOpcode(opv), isImportant(opv), state,
+			getFlagValue(opv))) {
+		return set_transform(state->computed, value, &matrix);
+	}
+
+	return CSS_OK;
+}
+
+css_error css__set_transform_from_hint(const css_hint *hint,
+		css_computed_style *style)
+{
+	return set_transform(style, hint->status, hint->data.transform);
+}
+
+css_error css__initial_transform(css_select_state *state)
+{
+	css_matrix matrix = {{1024,0,0,1024,0,0}};
+	return set_transform(state->computed,
+			CSS_TRANSFORM_NONE, &matrix);
+}
+
+css_error css__copy_transform(
+		const css_computed_style *from,
+		css_computed_style *to)
+{
+	css_matrix matrix;
+	uint8_t type = get_transform(from, &matrix);
+
+	if (from == to) {
+		return CSS_OK;
+	}
+
+	return set_transform(to, type, &matrix);
+}
+
+css_error css__compose_transform(const css_computed_style *parent,
+		const css_computed_style *child,
+		css_computed_style *result)
+{
+	css_matrix matrix;
+	uint8_t type = get_transform(child, &matrix);
+
+	return css__copy_transform(
+			type == CSS_TRANSFORM_INHERIT ? parent : child,
+			result);
+}
diff --git a/src/select/select_config.py b/src/select/select_config.py
index e741dc3..75e3c4d 100644
--- a/src/select/select_config.py
+++ b/src/select/select_config.py
@@ -16,7 +16,8 @@ values = {
     ('string', 'lwc_string*'),
     ('string_arr', 'lwc_string**'),
     ('counter_arr', 'css_computed_counter*'),
-    ('content_item', 'css_computed_content_item*')
+    ('content_item', 'css_computed_content_item*'),
+    ('matrix', 'css_matrix', 4 * 6, '0'),
 }
 
 # Configuration of property groups.
@@ -72,6 +73,7 @@ style = {
     ('border_left_color', 2, 'color'),
     ('fill', 3, 'color'),
     ('stroke', 3, 'color'),
+    ('transform', 2, 'matrix'),
     ('stroke_width', 1, 'length', 'CSS_STROKE_WIDTH_SET'),
     ('border_top_width', 3, 'length', 'CSS_BORDER_WIDTH_WIDTH'),
     ('border_right_width', 3, 'length', 'CSS_BORDER_WIDTH_WIDTH'),
diff --git a/test/data/parse2/svg.dat b/test/data/parse2/svg.dat
index 9a5f918..404df24 100644
--- a/test/data/parse2/svg.dat
+++ b/test/data/parse2/svg.dat
@@ -173,3 +173,19 @@
 | *
 |  stroke-width: 50%
 #reset
+
+#data
+* { transform: none; }
+#errors
+#expected
+| *
+|  transform: none
+#reset
+
+#data
+* { transform: matrix(1,2,3,4,5,6); }
+#errors
+#expected
+| *
+|  transform: matrix(1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 6.000000)
+#reset
diff --git a/test/dump.h b/test/dump.h
index a8daa09..75881c5 100644
--- a/test/dump.h
+++ b/test/dump.h
@@ -496,6 +496,7 @@ static const char *opcode_names[] = {
 	"fill",
 	"stroke",
 	"stroke-width",
+	"transform",
 };
 
 static void dump_css_fixed(css_fixed f, char **ptr)
@@ -2684,6 +2685,21 @@ void dump_bytecode(css_style *style, char **ptr, uint32_t depth)
 					break;
 				}
 				break;
+			case CSS_PROP_TRANSFORM:
+				switch (value) {
+				case TRANSFORM_NONE:
+					*ptr += sprintf(*ptr, "none");
+					break;
+				case TRANSFORM_SET:
+					css_matrix val = *((css_matrix *) bytecode);
+					ADVANCE(sizeof(val));
+					*ptr += sprintf(*ptr, "matrix(%f, %f, %f, %f, %f, %f)",
+									FIXTOFLT(val.m[0]),FIXTOFLT(val.m[1]),
+									FIXTOFLT(val.m[2]),FIXTOFLT(val.m[3]),
+									FIXTOFLT(val.m[4]),FIXTOFLT(val.m[5]));
+					break;
+				}
+				break;
 			case CSS_PROP_UNICODE_BIDI:
 				switch (value) {
 				case UNICODE_BIDI_NORMAL:
