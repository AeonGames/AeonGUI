%{
/*
Copyright (C) 2019 Rodrigo Jose Hernandez Cordoba

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include <cstddef>
#include <cstdint>
#include <iostream>
#include "../core/parsers/dstype.h"
#include "aeongui/DrawCommand.h"

extern int dlex();
extern "C"
{
    int derror (std::vector<AeonGUI::DrawCommand>& aPath,const char *s);
}
%}

%define api.prefix {d}
%parse-param {std::vector<AeonGUI::DrawCommand>& aPath}

%token NUMBER

%%

svg-path:
    | moveto-drawto-command-groups
    ;
moveto-drawto-command-groups:
    moveto-drawto-command-group
    | moveto-drawto-command-groups moveto-drawto-command-group;
moveto-drawto-command-group:
    moveto
    | moveto drawto-commands
    ;
drawto-commands:
    drawto-command
    | drawto-commands drawto-command;
drawto-command:
    closepath
    | lineto
    | horizontal-lineto
    | vertical-lineto
    | curveto
    | smooth-curveto
    | quadratic-bezier-curveto
    | smooth-quadratic-bezier-curveto
    | elliptical-arc;
moveto:
    'M' coordinate-pair 
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'M',std::get<AeonGUI::Vector2>($2)});
        }
    | 'm' coordinate-pair 
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'m',std::get<AeonGUI::Vector2>($2)});
        }
    | 'M' coordinate-pair lineto-argument-sequence 
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($3);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size()+1);
            aPath.emplace_back(AeonGUI::DrawCommand{'M',std::get<AeonGUI::Vector2>($2)});
            for(auto &i: lineto_argument_sequence){aPath.emplace_back(AeonGUI::DrawCommand{'L',i});}
        }
    | 'm' coordinate-pair lineto-argument-sequence 
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($3);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size()+1);
            aPath.emplace_back(AeonGUI::DrawCommand{'m',std::get<AeonGUI::Vector2>($2)});
            for(auto &i: lineto_argument_sequence){aPath.emplace_back(AeonGUI::DrawCommand{'l',i});}
        }
    | 'M' coordinate-pair ',' lineto-argument-sequence 
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($4);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size()+1);
            aPath.emplace_back(AeonGUI::DrawCommand{'M',std::get<AeonGUI::Vector2>($2)});
            for(auto &i: lineto_argument_sequence){aPath.emplace_back(AeonGUI::DrawCommand{'L',i});}
        }
    | 'm' coordinate-pair ',' lineto-argument-sequence
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($4);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size()+1);
            aPath.emplace_back(AeonGUI::DrawCommand{'m',std::get<AeonGUI::Vector2>($2)});
            for(auto &i: lineto_argument_sequence){aPath.emplace_back(AeonGUI::DrawCommand{'l',i});}
        }
    ;
closepath:
    'Z' {aPath.emplace_back(AeonGUI::DrawCommand{'Z',{}});}
    |'z' {aPath.emplace_back(AeonGUI::DrawCommand{'z',{}});}
    ;
lineto:
    'L' lineto-argument-sequence
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($2);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size());
            for(auto &i: lineto_argument_sequence)
            {
                aPath.emplace_back(AeonGUI::DrawCommand{'L',i});
            }
        }
    | 'l' lineto-argument-sequence 
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($2);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size());
            for(auto &i: lineto_argument_sequence)
            {
                aPath.emplace_back(AeonGUI::DrawCommand{'l',i});
            }
        }
    ;
lineto-argument-sequence:
    coordinate-pair { $$ = std::vector<AeonGUI::Vector2>{std::get<AeonGUI::Vector2>($1)}; }
    | lineto-argument-sequence coordinate-pair 
        {
            std::get<std::vector<AeonGUI::Vector2>>($1).emplace_back(std::get<AeonGUI::Vector2>($2)); 
            $$ = std::move($1);
        }
    | lineto-argument-sequence ',' coordinate-pair
        {
            std::get<std::vector<AeonGUI::Vector2>>($1).emplace_back(std::get<AeonGUI::Vector2>($3));
            $$ = std::move($1);
        }
    ;
horizontal-lineto:
    'H' h-or-v-lineto-argument-sequence
    {
        auto& lineto_argument_sequence = std::get<std::vector<double>>($2);
        aPath.reserve(aPath.size() + lineto_argument_sequence.size());
        for(auto &i: lineto_argument_sequence)
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'L',{i,0.0}});
        }
    }
    | 'h'  h-or-v-lineto-argument-sequence
    {
        auto& lineto_argument_sequence = std::get<std::vector<double>>($2);
        aPath.reserve(aPath.size() + lineto_argument_sequence.size());
        for(auto &i: lineto_argument_sequence)
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'l',{i,0.0}});
        }
    }
    ;
h-or-v-lineto-argument-sequence:
    coordinate { $$ = std::vector<double>{std::get<double>($1)}; }
    | h-or-v-lineto-argument-sequence coordinate
    {
        std::get<std::vector<double>>($1).emplace_back(std::get<double>($2)); 
        $$ = std::move($1);
    }
    | h-or-v-lineto-argument-sequence ',' coordinate
    {
        std::get<std::vector<double>>($1).emplace_back(std::get<double>($3)); 
        $$ = std::move($1);
    }
    ;
vertical-lineto:
    'V' h-or-v-lineto-argument-sequence
    {
        auto& lineto_argument_sequence = std::get<std::vector<double>>($2);
        aPath.reserve(aPath.size() + lineto_argument_sequence.size());
        for(auto &i: lineto_argument_sequence)
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'L',{0.0,i}});
        }
    }
    | 'v'  h-or-v-lineto-argument-sequence
    {
        auto& lineto_argument_sequence = std::get<std::vector<double>>($2);
        aPath.reserve(aPath.size() + lineto_argument_sequence.size());
        for(auto &i: lineto_argument_sequence)
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'l',{0.0,i}});
        }
    }
    ;
curveto:
    'C' curveto-argument-sequence
    {
        auto& right = std::get<std::vector<AeonGUI::Vector2>>($2);
        aPath.reserve(aPath.size() + right.size());
        for(auto &i: right)
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'C',i});
        }
    }
    | 'c' curveto-argument-sequence
    {
        auto& right = std::get<std::vector<AeonGUI::Vector2>>($2);
        aPath.reserve(aPath.size() + right.size());
        for(auto &i: right)
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'c',i});
        }
    }
    ;
curveto-argument-sequence:
    curveto-argument { $$ = $1; }
    | curveto-argument-sequence curveto-argument
    {
        auto& left = std::get<std::vector<AeonGUI::Vector2>>($1);
        auto& right = std::get<std::vector<AeonGUI::Vector2>>($2);
        left.insert(left.end(),right.begin(),right.end());
        $$ = std::move($1);
    }
    | curveto-argument-sequence ',' curveto-argument
    {
        auto& left = std::get<std::vector<AeonGUI::Vector2>>($1);
        auto& right = std::get<std::vector<AeonGUI::Vector2>>($3);
        left.insert(left.end(),right.begin(),right.end());
        $$ = std::move($1);
    }
    ;
curveto-argument:
    coordinate-pair ',' coordinate-pair ',' coordinate-pair
    {
        $$ = std::vector<AeonGUI::Vector2>
        {
            std::get<AeonGUI::Vector2>($1),
            std::get<AeonGUI::Vector2>($3),
            std::get<AeonGUI::Vector2>($5)
        };
    }
    | coordinate-pair coordinate-pair coordinate-pair
    {
        $$ = std::vector<AeonGUI::Vector2>
        {
            std::get<AeonGUI::Vector2>($1),
            std::get<AeonGUI::Vector2>($2),
            std::get<AeonGUI::Vector2>($3)
        };
    }
    ;
smooth-curveto:
    'S' smooth-curveto-argument-sequence
    | 's'  smooth-curveto-argument-sequence
    ;
smooth-curveto-argument-sequence:
    smooth-curveto-argument
    | smooth-curveto-argument ',' smooth-curveto-argument-sequence;
smooth-curveto-argument:
    coordinate-pair ',' coordinate-pair;
quadratic-bezier-curveto:
    'Q' quadratic-bezier-curveto-argument-sequence
    | 'q'  quadratic-bezier-curveto-argument-sequence
    ;
quadratic-bezier-curveto-argument-sequence:
    quadratic-bezier-curveto-argument
    | quadratic-bezier-curveto-argument ',' 
        quadratic-bezier-curveto-argument-sequence;
quadratic-bezier-curveto-argument:
    coordinate-pair ',' coordinate-pair;
smooth-quadratic-bezier-curveto:
    'T' smooth-quadratic-bezier-curveto-argument-sequence
    | 't'  smooth-quadratic-bezier-curveto-argument-sequence
    ;
smooth-quadratic-bezier-curveto-argument-sequence:
    coordinate-pair
    | smooth-quadratic-bezier-curveto-argument-sequence ',' coordinate-pair;
elliptical-arc:
    'A' elliptical-arc-argument-sequence
    | 'a' elliptical-arc-argument-sequence
    ;
elliptical-arc-argument-sequence:
    elliptical-arc-argument
    | elliptical-arc-argument-sequence ',' elliptical-arc-argument
    | elliptical-arc-argument-sequence  elliptical-arc-argument
    ;
elliptical-arc-argument:
    NUMBER ',' NUMBER ',' 
        NUMBER ',' NUMBER ',' NUMBER ',' coordinate-pair;
coordinate-pair:
    coordinate ',' coordinate {$$ = AeonGUI::Vector2(std::get<double>($1),std::get<double>($3));}
    | coordinate coordinate {$$ = AeonGUI::Vector2(std::get<double>($1),std::get<double>($2));}
    ;
coordinate:
    NUMBER;
%%

extern "C"
{
    int derror (std::vector<AeonGUI::DrawCommand>& aPath,const char *s)
    {
        std::cerr << s << std::endl;
        return 0;
    }
}
