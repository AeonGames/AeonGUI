%code requires {
/*
Copyright (C) 2019,2020 Rodrigo Jose Hernandez Cordoba
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
}
%{
#define YY_NO_UNISTD_H 1
#include <cstddef>
#include <cstdint>
#include <cmath>
#include <iostream>
#include "../core/parsers/dstype.h"
#include "aeongui/DrawType.h"
extern int dlex();
extern "C"
{
    int derror (std::vector<AeonGUI::DrawType>& aPath,const char *s);
}
static void Merge(dstype& aLeft,dstype& aRight)
{
    auto& left = std::get<std::vector<AeonGUI::DrawType>>(aLeft);
    auto& right = std::get<std::vector<AeonGUI::DrawType>>(aRight);
    left.reserve(left.size()+right.size());
    left.insert(left.end(),right.begin(),right.end());
}
static void AddCommandToPath(std::vector<AeonGUI::DrawType>& aPath,const AeonGUI::DrawType& aCommand,std::vector<AeonGUI::DrawType>& aArguments)
{
    aPath.reserve(aPath.size()+aArguments.size()+1);
    aPath.emplace_back(aCommand);
    aPath.insert(aPath.end(),aArguments.begin(),aArguments.end());
}
static dstype GetArcArgs(const dstype& aRadii,const dstype& aRotation,const dstype& aLarge,const dstype& aSweep,const dstype& aEnd)
{
    return std::vector<AeonGUI::DrawType>
    {
        std::get<std::vector<AeonGUI::DrawType>>(aRadii)[0],
        std::get<std::vector<AeonGUI::DrawType>>(aRadii)[1],
        std::get<AeonGUI::DrawType>(aRotation),
        std::get<AeonGUI::DrawType>(aLarge),
        std::get<AeonGUI::DrawType>(aSweep),
        std::get<std::vector<AeonGUI::DrawType>>(aEnd)[0],
        std::get<std::vector<AeonGUI::DrawType>>(aEnd)[1]
    };
}
%}
%define api.prefix {d}
%parse-param {std::vector<AeonGUI::DrawType>& aPath}
%token FLAG NUMBER
%%
svg-path:
    | moveto-drawto-command-groups
    ;
moveto-drawto-command-groups:
    moveto-drawto-command-group
    | moveto-drawto-command-groups moveto-drawto-command-group;
moveto-drawto-command-group:
    moveto
    | moveto drawto-commands
    ;
drawto-commands:
    drawto-command
    | drawto-commands drawto-command;
drawto-command:
    closepath
    | lineto
    | horizontal-lineto
    | vertical-lineto
    | curveto
    | smooth-curveto
    | quadratic-bezier-curveto
    | smooth-quadratic-bezier-curveto
    | elliptical-arc;
moveto:
    'M' single-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    |
    'm' single-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
closepath:
    'Z' {aPath.emplace_back(std::get<AeonGUI::DrawType>($1));}
    |'z' {aPath.emplace_back(std::get<AeonGUI::DrawType>($1));}
    ;
lineto:
    'L' single-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    |
    'l' single-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
horizontal-lineto:
    'H' coordinate-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    | 'h' coordinate-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
vertical-lineto:
    'V' coordinate-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    | 'v' coordinate-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
curveto:
    'C' triple-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    | 'c' triple-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
smooth-curveto:
    'S' double-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    | 's' double-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
quadratic-bezier-curveto:
    'Q' double-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    | 'q' double-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
smooth-quadratic-bezier-curveto:
    'T' single-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    | 't' single-coordinate-pair-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
elliptical-arc:
    'A' elliptical-arc-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    |
    'a' elliptical-arc-argument-sequence {AddCommandToPath(aPath,std::get<AeonGUI::DrawType>($1),std::get<std::vector<AeonGUI::DrawType>>($2));}
    ;
elliptical-arc-argument-sequence:
    elliptical-arc-argument { $$ = std::move($1); }
    | elliptical-arc-argument-sequence elliptical-arc-argument
    {
        Merge($1,$2);
        $$ = std::move($1);
    }
    ;
elliptical-arc-argument:
    coordinate-pair coordinate FLAG FLAG coordinate-pair
    {
        $$ = GetArcArgs($1,$2,$3,$4,$5);
    }
    ;
triple-coordinate-pair-argument-sequence:
    triple-coordinate-pair-argument { $$ = std::move($1); }
    | triple-coordinate-pair-argument-sequence triple-coordinate-pair-argument
    {
        Merge($1,$2);
        $$ = std::move($1);
    }
    ;
triple-coordinate-pair-argument:
    coordinate-pair coordinate-pair coordinate-pair
    {
        auto& left = std::get<std::vector<AeonGUI::DrawType>>($1);
        auto& center = std::get<std::vector<AeonGUI::DrawType>>($2);
        auto& right = std::get<std::vector<AeonGUI::DrawType>>($3);
        left.reserve(left.size()+center.size()+right.size());
        left.insert(left.end(),center.begin(),center.end());
        left.insert(left.end(),right.begin(),right.end());
        $$ = std::move($1);
    }
    ;
double-coordinate-pair-argument-sequence:
    double-coordinate-pair-argument { $$ = std::move($1); }
    |
    double-coordinate-pair-argument-sequence double-coordinate-pair-argument
    {
        Merge($1,$2);
        $$ = std::move($1);
    }
    ;
double-coordinate-pair-argument:
    coordinate-pair coordinate-pair
    {
        Merge($1,$2);
        $$ = std::move($1);
    }
    ;
single-coordinate-pair-argument-sequence:
    coordinate-pair { $$ = std::move($1); }
    |
    single-coordinate-pair-argument-sequence coordinate-pair
    {
        Merge($1,$2);
        $$ = std::move($1);
    }
    ;
coordinate-pair:
    coordinate coordinate {$$ = std::vector<AeonGUI::DrawType>{std::get<AeonGUI::DrawType>($1),std::get<AeonGUI::DrawType>($2)};}
    ;
coordinate-argument-sequence:
    coordinate
    {
        $$ = std::vector<AeonGUI::DrawType>{std::get<AeonGUI::DrawType>($1)};
    }
    |
    coordinate-argument-sequence coordinate
    {
        std::get<std::vector<AeonGUI::DrawType>>($1).emplace_back(std::get<AeonGUI::DrawType>($2));
        $$ = std::move($1);
    }
    ;
coordinate:
    NUMBER
    |
    FLAG
    {
        $$ = std::get<bool>(std::get<AeonGUI::DrawType>($1)) ? 1.0 : 0.0;
    };
%%
extern "C"
{
    int derror (std::vector<AeonGUI::DrawType>& aPath,const char *s)
    {
        std::cerr << s << std::endl;
        return 0;
    }
}
