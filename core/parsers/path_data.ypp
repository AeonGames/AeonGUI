%{
/*
Copyright (C) 2019 Rodrigo Jose Hernandez Cordoba

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include <cstddef>
#include <cstdint>
#include <iostream>
#include "../core/parsers/dstype.h"
#include "aeongui/DrawCommand.h"

extern int dlex();
extern "C"
{
    int derror (std::vector<AeonGUI::DrawCommand>& aPath,const char *s);
}

static void AddCommandsToPath(std::vector<AeonGUI::DrawCommand>& aPath,uint64_t aCommand,std::vector<AeonGUI::Vector2>& aCoordinates)
{
    aPath.reserve(aPath.size()+aCoordinates.size());
    for(auto &i: aCoordinates)
    {
        aPath.emplace_back(AeonGUI::DrawCommand{aCommand,i});
    }
}

static void AddArcToPath(
    std::vector<AeonGUI::DrawCommand>& aPath,
    const AeonGUI::Vector2& aRadii,
    double aAngle,
    bool aLargeArc,
    bool aSweepFlag,
    const AeonGUI::Vector2& aEnd)
{
}

%}

%define api.prefix {d}
%parse-param {std::vector<AeonGUI::DrawCommand>& aPath}

%token FLAG NUMBER

%%

svg-path:
    | moveto-drawto-command-groups
    ;
moveto-drawto-command-groups:
    moveto-drawto-command-group
    | moveto-drawto-command-groups moveto-drawto-command-group;
moveto-drawto-command-group:
    moveto
    | moveto drawto-commands
    ;
drawto-commands:
    drawto-command
    | drawto-commands drawto-command;
drawto-command:
    closepath
    | lineto
    | horizontal-lineto
    | vertical-lineto
    | curveto
    | smooth-curveto
    | quadratic-bezier-curveto
    | smooth-quadratic-bezier-curveto
    | elliptical-arc;
moveto:
    'M' coordinate-pair 
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'M',std::get<AeonGUI::Vector2>($2)});
        }
    | 'm' coordinate-pair 
        {
            aPath.emplace_back(AeonGUI::DrawCommand{'m',std::get<AeonGUI::Vector2>($2)});
        }
    | 'M' coordinate-pair single-coordinate-pair-argument-sequence 
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($3);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size()+1);
            aPath.emplace_back(AeonGUI::DrawCommand{'M',std::get<AeonGUI::Vector2>($2)});
            for(auto &i: lineto_argument_sequence){aPath.emplace_back(AeonGUI::DrawCommand{'L',i});}
        }
    | 'm' coordinate-pair single-coordinate-pair-argument-sequence 
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($3);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size()+1);
            aPath.emplace_back(AeonGUI::DrawCommand{'m',std::get<AeonGUI::Vector2>($2)});
            for(auto &i: lineto_argument_sequence){aPath.emplace_back(AeonGUI::DrawCommand{'l',i});}
        }
    | 'M' coordinate-pair ',' single-coordinate-pair-argument-sequence 
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($4);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size()+1);
            aPath.emplace_back(AeonGUI::DrawCommand{'M',std::get<AeonGUI::Vector2>($2)});
            for(auto &i: lineto_argument_sequence){aPath.emplace_back(AeonGUI::DrawCommand{'L',i});}
        }
    | 'm' coordinate-pair ',' single-coordinate-pair-argument-sequence
        {
            auto& lineto_argument_sequence = std::get<std::vector<AeonGUI::Vector2>>($4);
            aPath.reserve(aPath.size()+lineto_argument_sequence.size()+1);
            aPath.emplace_back(AeonGUI::DrawCommand{'m',std::get<AeonGUI::Vector2>($2)});
            for(auto &i: lineto_argument_sequence){aPath.emplace_back(AeonGUI::DrawCommand{'l',i});}
        }
    ;
closepath:
    'Z' {aPath.emplace_back(AeonGUI::DrawCommand{'Z',{}});}
    |'z' {aPath.emplace_back(AeonGUI::DrawCommand{'z',{}});}
    ;
lineto:
    'L' single-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    | 
    'l' single-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    ;
horizontal-lineto:
    'H' x-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    | 'h' x-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    ;
vertical-lineto:
    'V' y-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    | 'v' y-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    ;
curveto:
    'C' triple-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    | 'c' triple-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    ;
smooth-curveto:
    'S' double-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    | 's' double-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    ;
quadratic-bezier-curveto:
    'Q' double-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    | 'q' double-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    ;
smooth-quadratic-bezier-curveto:
    'T' single-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    | 't' single-coordinate-pair-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    ;

elliptical-arc:
    'A' elliptical-arc-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    | 'a' elliptical-arc-argument-sequence {AddCommandsToPath(aPath,std::get<uint64_t>($1),std::get<std::vector<AeonGUI::Vector2>>($2));}
    ;
elliptical-arc-argument-sequence:
    elliptical-arc-argument
    | elliptical-arc-argument-sequence ',' elliptical-arc-argument
    | elliptical-arc-argument-sequence elliptical-arc-argument
    ;
elliptical-arc-argument:
    coordinate-pair coordinate FLAG FLAG coordinate-pair 
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($2),
        std::get<bool>($3),
        std::get<bool>($4),
        std::get<AeonGUI::Vector2>($5));
    }
    |
    coordinate-pair ',' coordinate FLAG FLAG coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($3),
        std::get<bool>($4),
        std::get<bool>($5),
        std::get<AeonGUI::Vector2>($6));
    }
    |
    coordinate-pair coordinate ',' FLAG FLAG coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($2),
        std::get<bool>($4),
        std::get<bool>($5),
        std::get<AeonGUI::Vector2>($6));
    }
    |
    coordinate-pair coordinate FLAG ',' FLAG coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($2),
        std::get<bool>($3),
        std::get<bool>($5),
        std::get<AeonGUI::Vector2>($6));
    }
    |
    coordinate-pair coordinate FLAG FLAG ',' coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($2),
        std::get<bool>($3),
        std::get<bool>($4),
        std::get<AeonGUI::Vector2>($6));
    }
    |
    coordinate-pair ',' coordinate ',' FLAG FLAG coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($3),
        std::get<bool>($5),
        std::get<bool>($6),
        std::get<AeonGUI::Vector2>($7));
    }
    |
    coordinate-pair coordinate FLAG ',' FLAG ',' coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($2),
        std::get<bool>($3),
        std::get<bool>($5),
        std::get<AeonGUI::Vector2>($7));
    }
    |
    coordinate-pair ',' coordinate FLAG FLAG ',' coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($3),
        std::get<bool>($4),
        std::get<bool>($5),
        std::get<AeonGUI::Vector2>($7));
    }
    |
    coordinate-pair coordinate ',' FLAG ',' FLAG coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($2),
        std::get<bool>($4),
        std::get<bool>($6),
        std::get<AeonGUI::Vector2>($7));
    }
    |
    coordinate-pair ',' coordinate FLAG ',' FLAG coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($3),
        std::get<bool>($4),
        std::get<bool>($6),
        std::get<AeonGUI::Vector2>($7));
    }
    |
    coordinate-pair coordinate ',' FLAG FLAG ',' coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($2),
        std::get<bool>($4),
        std::get<bool>($5),
        std::get<AeonGUI::Vector2>($7));
    }
    |
    coordinate-pair coordinate ',' FLAG ',' FLAG ',' coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($2),
        std::get<bool>($4),
        std::get<bool>($6),
        std::get<AeonGUI::Vector2>($8));
    }
    |
    coordinate-pair ',' coordinate FLAG ',' FLAG ',' coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($3),
        std::get<bool>($4),
        std::get<bool>($6),
        std::get<AeonGUI::Vector2>($8));
    }
    |
    coordinate-pair ',' coordinate ',' FLAG FLAG ',' coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($3),
        std::get<bool>($5),
        std::get<bool>($6),
        std::get<AeonGUI::Vector2>($8));
    }
    |
    coordinate-pair ',' coordinate ',' FLAG ',' FLAG coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($3),
        std::get<bool>($5),
        std::get<bool>($7),
        std::get<AeonGUI::Vector2>($8));
    }
    |
    coordinate-pair ',' coordinate ',' FLAG ',' FLAG ',' coordinate-pair
    {
        AddArcToPath(aPath,
        std::get<AeonGUI::Vector2>($1),
        std::get<double>($3),
        std::get<bool>($5),
        std::get<bool>($7),
        std::get<AeonGUI::Vector2>($9));
    }
    ;
triple-coordinate-pair-argument-sequence:
    triple-coordinate-pair-argument { $$ = $1; }
    | triple-coordinate-pair-argument-sequence triple-coordinate-pair-argument
    {
        auto& left = std::get<std::vector<AeonGUI::Vector2>>($1);
        auto& right = std::get<std::vector<AeonGUI::Vector2>>($2);
        left.insert(left.end(),right.begin(),right.end());
        $$ = std::move($1);
    }
    | triple-coordinate-pair-argument-sequence ',' triple-coordinate-pair-argument
    {
        auto& left = std::get<std::vector<AeonGUI::Vector2>>($1);
        auto& right = std::get<std::vector<AeonGUI::Vector2>>($3);
        left.insert(left.end(),right.begin(),right.end());
        $$ = std::move($1);
    }
    ;
triple-coordinate-pair-argument:
    coordinate-pair ',' coordinate-pair ',' coordinate-pair
    {
        $$ = std::vector<AeonGUI::Vector2>
        {
            std::get<AeonGUI::Vector2>($1),
            std::get<AeonGUI::Vector2>($3),
            std::get<AeonGUI::Vector2>($5)
        };
    }
    | coordinate-pair coordinate-pair coordinate-pair
    {
        $$ = std::vector<AeonGUI::Vector2>
        {
            std::get<AeonGUI::Vector2>($1),
            std::get<AeonGUI::Vector2>($2),
            std::get<AeonGUI::Vector2>($3)
        };
    }
    ;
double-coordinate-pair-argument-sequence:
    double-coordinate-pair-argument { $$ = $1; }
    |
    double-coordinate-pair-argument-sequence double-coordinate-pair-argument
    {
        auto& left = std::get<std::vector<AeonGUI::Vector2>>($1);
        auto& right = std::get<std::vector<AeonGUI::Vector2>>($2);
        left.insert(left.end(),right.begin(),right.end());
        $$ = std::move($1);
    }
    | double-coordinate-pair-argument-sequence ',' double-coordinate-pair-argument
    {
        auto& left = std::get<std::vector<AeonGUI::Vector2>>($1);
        auto& right = std::get<std::vector<AeonGUI::Vector2>>($3);
        left.insert(left.end(),right.begin(),right.end());
        $$ = std::move($1);
    }
    ;
double-coordinate-pair-argument:
    coordinate-pair ',' coordinate-pair
    {
        $$ = std::vector<AeonGUI::Vector2>
        {
            std::get<AeonGUI::Vector2>($1),
            std::get<AeonGUI::Vector2>($3)
        };
    }
    | coordinate-pair coordinate-pair
    {
        $$ = std::vector<AeonGUI::Vector2>
        {
            std::get<AeonGUI::Vector2>($1),
            std::get<AeonGUI::Vector2>($2)
        };
    }
    ;
single-coordinate-pair-argument-sequence:
    coordinate-pair { $$ = std::vector<AeonGUI::Vector2>{std::get<AeonGUI::Vector2>($1)}; }
    | single-coordinate-pair-argument-sequence coordinate-pair 
        {
            std::get<std::vector<AeonGUI::Vector2>>($1).emplace_back(std::get<AeonGUI::Vector2>($2));
            $$ = std::move($1);
        }
    | single-coordinate-pair-argument-sequence ',' coordinate-pair
        {
            std::get<std::vector<AeonGUI::Vector2>>($1).emplace_back(std::get<AeonGUI::Vector2>($3));
            $$ = std::move($1);
        }
    ;
coordinate-pair:
    coordinate ',' coordinate {$$ = AeonGUI::Vector2(std::get<double>($1),std::get<double>($3));}
    | coordinate coordinate {$$ = AeonGUI::Vector2(std::get<double>($1),std::get<double>($2));}
    ;
x-coordinate-pair-argument-sequence:
    coordinate { $$ = std::vector<AeonGUI::Vector2>{{std::get<double>($1),0.0}}; }
    | x-coordinate-pair-argument-sequence coordinate
    {
        std::get<std::vector<AeonGUI::Vector2>>($1).emplace_back(AeonGUI::Vector2{std::get<double>($2),0.0});
        $$ = std::move($1);
    }
    | x-coordinate-pair-argument-sequence ',' coordinate
    {
        std::get<std::vector<AeonGUI::Vector2>>($1).emplace_back(AeonGUI::Vector2{std::get<double>($3),0.0});
        $$ = std::move($1);
    }
    ;
y-coordinate-pair-argument-sequence:
    coordinate { $$ = std::vector<AeonGUI::Vector2>{{0.0,std::get<double>($1)}}; }
    | y-coordinate-pair-argument-sequence coordinate
    {
        std::get<std::vector<AeonGUI::Vector2>>($1).emplace_back(AeonGUI::Vector2{0.0,std::get<double>($2)});
        $$ = std::move($1);
    }
    | y-coordinate-pair-argument-sequence ',' coordinate
    {
        std::get<std::vector<AeonGUI::Vector2>>($1).emplace_back(AeonGUI::Vector2{0.0,std::get<double>($3)});
        $$ = std::move($1);
    }
    ;
coordinate:
    NUMBER | FLAG {$$ = std::get<bool>($1) ? 1.0 : 0.0;};
%%

extern "C"
{
    int derror (std::vector<AeonGUI::DrawCommand>& aPath,const char *s)
    {
        std::cerr << s << std::endl;
        return 0;
    }
}
